/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// DomainData : Domain data, with information about domain records.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DomainData {
    /// Domain validation results - when domain has been running through validation process
    #[serde(rename = "ValidationLog", skip_serializing_if = "Option::is_none")]
    pub validation_log: Option<String>,
    /// Name of selected domain.
    #[serde(rename = "Domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// True, if domain is used as default. Otherwise, false,
    #[serde(rename = "DefaultDomain", skip_serializing_if = "Option::is_none")]
    pub default_domain: Option<bool>,
    /// True, if SPF record is verified
    #[serde(rename = "Spf", skip_serializing_if = "Option::is_none")]
    pub spf: Option<bool>,
    /// True, if DKIM record is verified
    #[serde(rename = "Dkim", skip_serializing_if = "Option::is_none")]
    pub dkim: Option<bool>,
    /// True, if MX record is verified
    #[serde(rename = "MX", skip_serializing_if = "Option::is_none")]
    pub mx: Option<bool>,
    #[serde(rename = "DMARC", skip_serializing_if = "Option::is_none")]
    pub dmarc: Option<bool>,
    /// True, if tracking CNAME record is verified
    #[serde(rename = "IsRewriteDomainValid", skip_serializing_if = "Option::is_none")]
    pub is_rewrite_domain_valid: Option<bool>,
    /// True, if DKIM, SPF, or tracking are still to be verified
    #[serde(rename = "Verify", skip_serializing_if = "Option::is_none")]
    pub verify: Option<bool>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::TrackingType>,
    #[serde(rename = "TrackingStatus", skip_serializing_if = "Option::is_none")]
    pub tracking_status: Option<models::TrackingValidationStatus>,
    #[serde(rename = "CertificateStatus", skip_serializing_if = "Option::is_none")]
    pub certificate_status: Option<models::CertificateValidationStatus>,
    #[serde(rename = "CertificateValidationError", skip_serializing_if = "Option::is_none")]
    pub certificate_validation_error: Option<String>,
    #[serde(rename = "TrackingTypeUserRequest", skip_serializing_if = "Option::is_none")]
    pub tracking_type_user_request: Option<models::TrackingType>,
    #[serde(rename = "VERP", skip_serializing_if = "Option::is_none")]
    pub verp: Option<bool>,
    #[serde(rename = "CustomBouncesDomain", skip_serializing_if = "Option::is_none")]
    pub custom_bounces_domain: Option<String>,
    #[serde(rename = "IsCustomBouncesDomainDefault", skip_serializing_if = "Option::is_none")]
    pub is_custom_bounces_domain_default: Option<bool>,
    #[serde(rename = "IsMarkedForDeletion", skip_serializing_if = "Option::is_none")]
    pub is_marked_for_deletion: Option<bool>,
    #[serde(rename = "Ownership", skip_serializing_if = "Option::is_none")]
    pub ownership: Option<models::DomainOwner>,
}

impl DomainData {
    /// Domain data, with information about domain records.
    pub fn new() -> DomainData {
        DomainData {
            validation_log: None,
            domain: None,
            default_domain: None,
            spf: None,
            dkim: None,
            mx: None,
            dmarc: None,
            is_rewrite_domain_valid: None,
            verify: None,
            r#type: None,
            tracking_status: None,
            certificate_status: None,
            certificate_validation_error: None,
            tracking_type_user_request: None,
            verp: None,
            custom_bounces_domain: None,
            is_custom_bounces_domain_default: None,
            is_marked_for_deletion: None,
            ownership: None,
        }
    }
}

