/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContactStatus {
    #[serde(rename = "Transactional")]
    Transactional,
    #[serde(rename = "Engaged")]
    Engaged,
    #[serde(rename = "Active")]
    Active,
    #[serde(rename = "Bounced")]
    Bounced,
    #[serde(rename = "Unsubscribed")]
    Unsubscribed,
    #[serde(rename = "Abuse")]
    Abuse,
    #[serde(rename = "Inactive")]
    Inactive,
    #[serde(rename = "Stale")]
    Stale,
    #[serde(rename = "NotConfirmed")]
    NotConfirmed,

}

impl std::fmt::Display for ContactStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Transactional => write!(f, "Transactional"),
            Self::Engaged => write!(f, "Engaged"),
            Self::Active => write!(f, "Active"),
            Self::Bounced => write!(f, "Bounced"),
            Self::Unsubscribed => write!(f, "Unsubscribed"),
            Self::Abuse => write!(f, "Abuse"),
            Self::Inactive => write!(f, "Inactive"),
            Self::Stale => write!(f, "Stale"),
            Self::NotConfirmed => write!(f, "NotConfirmed"),
        }
    }
}

impl Default for ContactStatus {
    fn default() -> ContactStatus {
        Self::Transactional
    }
}

