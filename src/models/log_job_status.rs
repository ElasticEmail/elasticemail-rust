/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogJobStatus {
    #[serde(rename = "All")]
    All,
    #[serde(rename = "ReadyToSend")]
    ReadyToSend,
    #[serde(rename = "WaitingToRetry")]
    WaitingToRetry,
    #[serde(rename = "Sending")]
    Sending,
    #[serde(rename = "Error")]
    Error,
    #[serde(rename = "Sent")]
    Sent,
    #[serde(rename = "Opened")]
    Opened,
    #[serde(rename = "Clicked")]
    Clicked,
    #[serde(rename = "Unsubscribed")]
    Unsubscribed,
    #[serde(rename = "AbuseReport")]
    AbuseReport,

}

impl std::fmt::Display for LogJobStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::All => write!(f, "All"),
            Self::ReadyToSend => write!(f, "ReadyToSend"),
            Self::WaitingToRetry => write!(f, "WaitingToRetry"),
            Self::Sending => write!(f, "Sending"),
            Self::Error => write!(f, "Error"),
            Self::Sent => write!(f, "Sent"),
            Self::Opened => write!(f, "Opened"),
            Self::Clicked => write!(f, "Clicked"),
            Self::Unsubscribed => write!(f, "Unsubscribed"),
            Self::AbuseReport => write!(f, "AbuseReport"),
        }
    }
}

impl Default for LogJobStatus {
    fn default() -> LogJobStatus {
        Self::All
    }
}

