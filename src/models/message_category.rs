/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MessageCategory {
    #[serde(rename = "Unknown")]
    Unknown,
    #[serde(rename = "Ignore")]
    Ignore,
    #[serde(rename = "Spam")]
    Spam,
    #[serde(rename = "BlackListed")]
    BlackListed,
    #[serde(rename = "NoMailbox")]
    NoMailbox,
    #[serde(rename = "GreyListed")]
    GreyListed,
    #[serde(rename = "Throttled")]
    Throttled,
    #[serde(rename = "Timeout")]
    Timeout,
    #[serde(rename = "ConnectionProblem")]
    ConnectionProblem,
    #[serde(rename = "SPFProblem")]
    SpfProblem,
    #[serde(rename = "AccountProblem")]
    AccountProblem,
    #[serde(rename = "DNSProblem")]
    DnsProblem,
    #[serde(rename = "NotDeliveredCancelled")]
    NotDeliveredCancelled,
    #[serde(rename = "CodeError")]
    CodeError,
    #[serde(rename = "ManualCancel")]
    ManualCancel,
    #[serde(rename = "ConnectionTerminated")]
    ConnectionTerminated,
    #[serde(rename = "NotDelivered")]
    NotDelivered,

}

impl ToString for MessageCategory {
    fn to_string(&self) -> String {
        match self {
            Self::Unknown => String::from("Unknown"),
            Self::Ignore => String::from("Ignore"),
            Self::Spam => String::from("Spam"),
            Self::BlackListed => String::from("BlackListed"),
            Self::NoMailbox => String::from("NoMailbox"),
            Self::GreyListed => String::from("GreyListed"),
            Self::Throttled => String::from("Throttled"),
            Self::Timeout => String::from("Timeout"),
            Self::ConnectionProblem => String::from("ConnectionProblem"),
            Self::SpfProblem => String::from("SPFProblem"),
            Self::AccountProblem => String::from("AccountProblem"),
            Self::DnsProblem => String::from("DNSProblem"),
            Self::NotDeliveredCancelled => String::from("NotDeliveredCancelled"),
            Self::CodeError => String::from("CodeError"),
            Self::ManualCancel => String::from("ManualCancel"),
            Self::ConnectionTerminated => String::from("ConnectionTerminated"),
            Self::NotDelivered => String::from("NotDelivered"),
        }
    }
}

impl Default for MessageCategory {
    fn default() -> MessageCategory {
        Self::Unknown
    }
}




