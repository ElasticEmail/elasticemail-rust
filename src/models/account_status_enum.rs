/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccountStatusEnum {
    #[serde(rename = "Disabled")]
    Disabled,
    #[serde(rename = "UnderReview")]
    UnderReview,
    #[serde(rename = "NeverSignedIn")]
    NeverSignedIn,
    #[serde(rename = "Active")]
    Active,

}

impl std::fmt::Display for AccountStatusEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Disabled => write!(f, "Disabled"),
            Self::UnderReview => write!(f, "UnderReview"),
            Self::NeverSignedIn => write!(f, "NeverSignedIn"),
            Self::Active => write!(f, "Active"),
        }
    }
}

impl Default for AccountStatusEnum {
    fn default() -> AccountStatusEnum {
        Self::Disabled
    }
}

