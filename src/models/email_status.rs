/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */

/// EmailStatus : Status information of the specified email



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmailStatus {
    /// Email address this email was sent from.
    #[serde(rename = "From", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Email address this email was sent to.
    #[serde(rename = "To", skip_serializing_if = "Option::is_none")]
    pub to: Option<String>,
    /// Date the email was submitted.
    #[serde(rename = "Date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    /// Value of email's status
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::LogJobStatus>>,
    /// Name of email's status
    #[serde(rename = "StatusName", skip_serializing_if = "Option::is_none")]
    pub status_name: Option<String>,
    /// Date of last status change.
    #[serde(rename = "StatusChangeDate", skip_serializing_if = "Option::is_none")]
    pub status_change_date: Option<String>,
    /// Date when the email was sent
    #[serde(rename = "DateSent", skip_serializing_if = "Option::is_none")]
    pub date_sent: Option<String>,
    /// Date when the email changed the status to 'opened'
    #[serde(rename = "DateOpened", skip_serializing_if = "Option::is_none")]
    pub date_opened: Option<String>,
    /// Date when the email changed the status to 'clicked'
    #[serde(rename = "DateClicked", skip_serializing_if = "Option::is_none")]
    pub date_clicked: Option<String>,
    /// Detailed error or bounced message.
    #[serde(rename = "ErrorMessage", skip_serializing_if = "Option::is_none")]
    pub error_message: Option<String>,
    /// ID number of transaction
    #[serde(rename = "TransactionID", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    /// Envelope from address
    #[serde(rename = "EnvelopeFrom", skip_serializing_if = "Option::is_none")]
    pub envelope_from: Option<String>,
}

impl EmailStatus {
    /// Status information of the specified email
    pub fn new() -> EmailStatus {
        EmailStatus {
            from: None,
            to: None,
            date: None,
            status: None,
            status_name: None,
            status_change_date: None,
            date_sent: None,
            date_opened: None,
            date_clicked: None,
            error_message: None,
            transaction_id: None,
            envelope_from: None,
        }
    }
}


