/*
 * Elastic Email REST API
 *
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 * Generated by: https://openapi-generator.tech
 */

/// VerificationFileResultDetails : Detailed verification file result info



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerificationFileResultDetails {
    /// Verification result's details
    #[serde(rename = "VerificationResult", skip_serializing_if = "Option::is_none")]
    pub verification_result: Option<Vec<crate::models::EmailValidationResult>>,
    /// Identifier of this verification result
    #[serde(rename = "VerificationID", skip_serializing_if = "Option::is_none")]
    pub verification_id: Option<String>,
    /// Origin file name
    #[serde(rename = "Filename", skip_serializing_if = "Option::is_none")]
    pub filename: Option<String>,
    /// In what state does this verification result currently is
    #[serde(rename = "VerificationStatus", skip_serializing_if = "Option::is_none")]
    pub verification_status: Option<Box<crate::models::VerificationStatus>>,
    /// How many emails were detected in the file for verification
    #[serde(rename = "FileUploadResult", skip_serializing_if = "Option::is_none")]
    pub file_upload_result: Option<Box<crate::models::FileUploadResult>>,
    /// Date of creation in YYYY-MM-DDThh:ii:ss format
    #[serde(rename = "DateAdded", skip_serializing_if = "Option::is_none")]
    pub date_added: Option<String>,
    /// Origin file extension
    #[serde(rename = "Source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

impl VerificationFileResultDetails {
    /// Detailed verification file result info
    pub fn new() -> VerificationFileResultDetails {
        VerificationFileResultDetails {
            verification_result: None,
            verification_id: None,
            filename: None,
            verification_status: None,
            file_upload_result: None,
            date_added: None,
            source: None,
        }
    }
}


